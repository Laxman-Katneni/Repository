import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Laxman Katneni
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        int titleNum = getChildElement(channel, "title");
        int descriptionNum = getChildElement(channel, "description");
        int linkNum = getChildElement(channel, "link");

        String title = "Empty Title";
        String description = "No description";

        if (channel.child(titleNum).numberOfChildren() > 0) {
            title = channel.child(titleNum).child(0).label();
        }
        if (channel.child(descriptionNum).numberOfChildren() > 0) {
            description = channel.child(descriptionNum).child(0).label();
        }

        out.println("<html> <head> <title>" + title + "</title></head><body>");

        out.println("<h1><a href = \"" + channel.child(linkNum).child(0).label()
                + "\">" + title + "</a></h1>");

        out.println("<p>" + description + "</p>");

        out.println("<table border=\"1\">");
        out.println("<tr><th>Date</th><th>Source</th><th>News</th> </tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;
        int numChildren = xml.numberOfChildren();
        int i = 0;
        while (xml.isTag() && xml.label().equals(tag) || i < numChildren) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
            i++;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */

        out.println("<tr>");

        int pubDateNum = getChildElement(item, "pubDate");
        int titleNum = getChildElement(item, "title");
        int sourceNum = getChildElement(item, "source");
        int linkNum = getChildElement(item, "link");

        String pubDate = "No date available";
        String source = "No source availabe";
        String title = "No title available";
        String link = "";

        if (pubDateNum != -1) {

            pubDate = item.child(pubDateNum).child(0).label().substring(0, 10);
        }

        if (titleNum != -1) {

            if (item.child(titleNum).numberOfChildren() > 0) {
                title = item.child(titleNum).child(0).label();
            }
        }

        if (sourceNum != -1) {
            if (item.child(sourceNum).numberOfChildren() > 0) {
                source = item.child(sourceNum).child(0).label();
            }
        }
        if (linkNum != -1) {
            if (item.child(sourceNum).numberOfChildren() > 0) {
                link = item.child(linkNum).child(0).label();
            }
        }

        out.println("<tr>");

        out.println("<td>" + pubDate + "</td>");

        if (!link.equals("")) {
            if (item.child(sourceNum).hasAttribute("url")) {

                String sourceLink = item.child(sourceNum).attributeValue("url");
                out.println("<td><a href = \"" + sourceLink + "\">" + source
                        + "</a></td>");
            }

            out.println(
                    "<td><a href = \"" + link + "\">" + title + "</a></td>");
        } else {
            out.println("<td>" + source + "</td>");
            out.println("<td>" + title + "</td>");
        }

        out.println("</tr>");
    }

    /**
     * Main method. https://news.yahoo.com/rss/
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * TODO: fill in body
         */

        out.println("Enter URL of RSS2.0 feed");
        XMLTree xmlRSS = new XMLTree1(in.nextLine());

        XMLTree channel = xmlRSS.child(0);

        out.println("Enter file name:");
        String FileName = in.nextLine();

        SimpleWriter webPage = new SimpleWriter1L(FileName);
        String label = xmlRSS.label();

        if (label.equals("rss")
                && xmlRSS.attributeValue("version").equals("2.0")) {
            String attribute = xmlRSS.attributeValue("version");

            outputHeader(channel, webPage);

            int i = 0;
            while (i < channel.numberOfChildren()) {

                if (channel.child(i).label().equals("item")) {

                    XMLTree item = channel.child(i);
                    processItem(item, webPage);
                }
                i++;
            }
            outputFooter(webPage);

        }

        webPage.println();
        in.close();
        out.close();
    }

}
